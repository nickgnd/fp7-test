<blockquote>
<div>Double-click on a node to retrieve its neighbors</div>
<div>Right-click on a node to retrieve more information about it</div>
</blockquote>

<div id="graph-container"></div>

<br/>

<div id="organizationModal" class="reveal-modal" data-reveal aria-labelledby="modalTitle" aria-hidden="true" role="dialog">
  <%= render partial: "organization_info" %>
</div>




<script>

  // Hash to store original color of the graph
  var colorNodes = {},
      colorEdges = {};

  // The id of the organization node
  var original_node = $('.id-value')[0].firstChild.nodeValue.toString(); // The id of the organization node


  // I check if Sigma instance already exists. if not -> i create new Sigma instance
  if (typeof s === 'undefined') {

    // Add a new method to the graph model that returns an object with every neighbors of a node inside:
    sigma.classes.graph.addMethod('neighbors', function(nodeId) {
      var k,
          neighbors = {},
          index = this.allNeighborsIndex[nodeId] ||Â {};

      for (k in index)
        neighbors[k] = this.nodesIndex[k];

      return neighbors;
    });

    s = new sigma();

  }


  // Load a json with s parameter to refer to the sigma instance
  sigma.parsers.json(
    original_node + ".json", // json url
    s,
    function() {

      s.settings({
        minNodeSize: 5,
        maxNodeSize: 25,
        doubleClickEnabled: false,
        minEdgeSize: 0.5,
        maxEdgeSize: 4,
        // enableEdgeHovering: true,
        // edgeHoverColor: 'edge',
        // defaultEdgeHoverColor: '#000',
        // edgeHoverSizeRatio: 1,
        // edgeHoverExtremities: true
      });

      s.addRenderer({
        type: 'canvas',
        container: 'graph-container'
      });


      // this below adds (x,y) attributes as well as size = degree of the node --> TO CHANGE (Weigth)
      var i,
        nodes = s.graph.nodes(),
        len = nodes.length;

      for (i = 0; i < len; i++) {
          nodes[i].x = Math.random();
          nodes[i].y = Math.random();

          nodes[i].label = nodes[i].organization_name;

          nodes[i].size = s.graph.degree(nodes[i].id);
          nodes[i].color = "#a9c6e1";
        }

      // Set color for the orginal node
      s.graph.nodes(parseInt(original_node)).color ='#2871b4'; // primary color for the original node

      // Set the color for the edges
      node_edges = s.graph.neighborhood(parseInt(original_node)).edges;
      node_edges.forEach(function(e) {
        if (e.source == parseInt(original_node) || e.target == parseInt(original_node))
            e.color = "#2871b4"; // If linked with original node -> primary color
        else
            e.color = "#a9c6e1";
      });

      // Save the original colors of our nodes and edges
      s.graph.nodes().forEach(function(n) {
        colorNodes[n.id] = n.color;
      });
      s.graph.edges().forEach(function(e) {
        colorEdges[e.id] = e.color;
      });

      s.refresh();
      }
    );

  // When a node is clicked, we check for each node if it is a neighbor of the clicked one. If not,
  // we set its color as grey, and else, it takes its original color.
  // We do the same for the edges, and we only keep edges that have both extremities colored.
  s.bind('clickNode', function(e) {
    var nodeId = e.data.node.id,
        toKeep = s.graph.neighbors(nodeId);

    toKeep[nodeId] = e.data.node;

    s.graph.nodes().forEach(function(n) {
      if (toKeep[n.id])
        n.color = colorNodes[n.id];
      else
        n.color = '#ccc';
    });

    s.graph.edges().forEach(function(e) {
      if (toKeep[e.source] && toKeep[e.target])
        e.color = colorEdges[e.id];
      else
        e.color = 'grey';
    });

    // When the stage is clicked, we just color each
    // node and edge with its original color.
    s.bind('clickStage', function(e) {
      s.graph.nodes().forEach(function(n) {
        n.color = colorNodes[n.id];
        });

      s.graph.edges().forEach(function(e) {
        e.color = colorEdges[e.id];
        });

      });

    // Same as in the previous event:
    s.refresh();
    }
  );

  // ! DoubleClickNode fires also single clickNode
  // and with large file it could increase response time
  // see https://github.com/jacomyal/sigma.js/issues/506
  // Use rightClickNode to fix it!
  // (next step use tooltips https://github.com/Linkurious/linkurious.js/tree/linkurious-version/plugins/sigma.plugins.tooltips)
  s.bind('rightClickNode', function(e) {
    $.ajax({
      method: 'get',
      url: '/organizations/show/' + original_node,
      data: {organization_extra_id: e.data.node.id},
      dataType: 'script'
    })
    .done(function( data ) {
      // Open modal window with Foundation
      $("#organizationModal").foundation('reveal','open');
    });
  });



</script>


